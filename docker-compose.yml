services:

    immo-fetch-db:
        image: mongo:5.0.3
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${IMMO_FETCH_MONGO_USER}
            MONGO_INITDB_ROOT_PASSWORD: ${IMMO_FETCH_MONGO_PASSWORD}
            MONGO_INITDB_DATABASE: ${IMMO_FETCH_MONGO_DB_NAME}
        volumes:
            - immo-fetch-db:/data/db
        networks:
            - app-tier
        ports:
            - 27017:27017

    immo-viz-db:
        image: postgres:16.4
        restart: always
        # set shared memory limit when using docker-compose
        shm_size: 128mb
        # or set shared memory limit when deploy via swarm stack
        #volumes:
        #  - type: tmpfs
        #    target: /dev/shm
        #    tmpfs:
        #      size: 134217728 # 128*2^20 bytes = 128Mb
        environment:
            POSTGRES_USER: ${IMMO_VIZ_DB_POSTGRES_USER}
            POSTGRES_PASSWORD: ${IMMO_VIZ_DB_POSTGRES_PASSWORD}
            POSTGRES_DB: ${IMMO_VIZ_DB_POSTGRES_DB}
        ports:
            - ${IMMO_VIZ_DB_POSTGRES_PORT}:5432
        volumes:
            - immo-viz-db:/var/lib/postgresql/data
        networks:
            - app-tier
    
    immo-monitoring-db:
        image: postgres:16.4
        restart: always
        # set shared memory limit when using docker-compose
        shm_size: 128mb
        # or set shared memory limit when deploy via swarm stack
        #volumes:
        #  - type: tmpfs
        #    target: /dev/shm
        #    tmpfs:
        #      size: 134217728 # 128*2^20 bytes = 128Mb
        environment:
            POSTGRES_USER: ${IMMO_MONITORING_DB_POSTGRES_USER}
            POSTGRES_PASSWORD: ${IMMO_MONITORING_DB_POSTGRES_PASSWORD}
            POSTGRES_DB: ${IMMO_MONITORING_DB_POSTGRES_DB}
        volumes:
            - immo-monitoring-db:/var/lib/postgresql/data
        networks:
            - app-tier

    immoscraper:
        build:
            context: ./immoscraper
            dockerfile: Dockerfile
        environment:
            IMMO_FETCH_MONGO_URI: "mongodb://${IMMO_FETCH_MONGO_USER}:${IMMO_FETCH_MONGO_PASSWORD}@immo-fetch-db:27017/${IMMO_FETCH_MONGO_DB_NAME}?authSource=admin"
            IMMO_FETCH_MONGO_DB_NAME: ${IMMO_FETCH_MONGO_DB_NAME}
            IMMO_FETCH_MONGO_COLLECTION_NAME: ${IMMO_FETCH_MONGO_COLLECTION_NAME}
            IMMO_VIZ_API_URL: ${IMMO_VIZ_API_URL}
            LOG_LEVEL: ${LOG_LEVEL}
            SCRAPS: ${SCRAPS}       # List of spiders to launch
            SCRAPS_RUN_TIMES: ${SCRAPS_RUN_TIMES}    # List of times (HH:MM)
        depends_on:
            - immo-fetch-db
            - immo-viz-api
        networks:
            - app-tier
    
    analysis-scheduler:
        build:
            context: ./analysis-scheduler
            dockerfile: Dockerfile
        environment:
            IMMO_FETCH_MONGO_URI: "mongodb://${IMMO_FETCH_MONGO_USER}:${IMMO_FETCH_MONGO_PASSWORD}@immo-fetch-db:27017/${IMMO_FETCH_MONGO_DB_NAME}?authSource=admin"
            IMMO_FETCH_MONGO_DB_NAME: ${IMMO_FETCH_MONGO_DB_NAME}
            IMMO_FETCH_MONGO_COLLECTION_NAME: ${IMMO_FETCH_MONGO_COLLECTION_NAME}
            ANALYSIS_SCHEDULES_COLLECTION_NAME: ${ANALYSIS_SCHEDULES_COLLECTION_NAME}
            IMMO_VIZ_API_URL: ${IMMO_VIZ_API_URL}
            KAFKA_HOST: ${KAFKA_HOST}
            KAFKA_TOPIC_NAME: ${SCRAPER_KAFKA_TOPIC}
            START_SCHEDULER_INTERVAL: ${START_SCHEDULER_INTERVAL}
            LOG_LEVEL: ${LOG_LEVEL}
        depends_on:
            - immo-fetch-db
            - immo-viz-api
            - kafka
        networks:
            - app-tier

    kafka:
        image: 'bitnami/kafka:latest'
        container_name: kafka
        ports:
            - '9092:9092'
        environment:
            - KAFKA_CFG_NODE_ID=0
            - KAFKA_CFG_PROCESS_ROLES=controller,broker
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_HOST}
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
            - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
            - KAFKA_CREATE_TOPICS=${DVF_KAFKA_TOPIC}:${DVF_KAFKA_PARTITIONS}:${DVF_KAFKA_RF},${SCRAPER_KAFKA_TOPIC}:${SCRAPER_KAFKA_PARTITIONS}:${SCRAPER_KAFKA_RF}
        networks:
            - app-tier
            
    spark-master:
        image: bitnami/spark:3.5.0
        container_name: spark-master
        environment:
            - SPARK_MODE=master
            - SPARK_RPC_AUTHENTICATION_ENABLED=no
            - SPARK_RPC_ENCRYPTION_ENABLED=no
            - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
            - SPARK_SSL_ENABLED=no
        ports:
            - "${SPARK_MASTER_RPC_PORT}:${SPARK_MASTER_RPC_PORT}"
            - "${SPARK_MASTER_UI_HOST_PORT}:${SPARK_MASTER_UI_PORT}"
        depends_on:
            - kafka
        networks:
            - app-tier

    spark-worker:
        image: bitnami/spark:3.5.0
        environment:
            - SPARK_MODE=worker
            - SPARK_MASTER_URL=spark://spark-master:${SPARK_MASTER_RPC_PORT}
            - SPARK_WORKER_MEMORY=1G
            - SPARK_WORKER_CORES=${SPARK_WORKER_CORES}
        depends_on:
            - spark-master
        networks:
            - app-tier
        deploy:
            replicas: ${SPARK_WORKER_REPLICAS}

    property-ads-analyzer:
        build:
            context: ./property-ads-analyzer
            dockerfile: Dockerfile
        environment:
            IMMO_VIZ_API_URL: ${IMMO_VIZ_API_URL}
            KAFKA_HOST: ${KAFKA_HOST}
            KAFKA_ANALYZER_TOPICS: ${KAFKA_ANALYZER_TOPICS}
            DVF_KAFKA_TOPIC: ${DVF_KAFKA_TOPIC}
            LOG_LEVEL: ${LOG_LEVEL}
        depends_on:
            - kafka
            - immo-viz-api
            - spark-master
        networks:
            - app-tier
        restart: on-failure

    immo-viz-api:
        build:
            context: ./immo-viz-api/
            dockerfile: Dockerfile
        environment:
            VIZ_DATABASE_URL: "postgresql://${IMMO_VIZ_DB_POSTGRES_USER}:${IMMO_VIZ_DB_POSTGRES_PASSWORD}@immo-viz-db:5432/${IMMO_VIZ_DB_POSTGRES_DB}?sslmode=disable"
            MONITORING_DATABASE_URL: "postgresql://${IMMO_MONITORING_DB_POSTGRES_USER}:${IMMO_MONITORING_DB_POSTGRES_PASSWORD}@immo-monitoring-db:5432/${IMMO_MONITORING_DB_POSTGRES_DB}?sslmode=disable"
        develop:
            watch:
                - action: sync
                  path: ./immo-viz-api/
                  target: /app
                  ignore:
                      - ./immo-viz-api/pyproject.toml
                      - ./immo-viz-api/poetry.lock
                - action: rebuild
                  path: ./immo-viz-api/pyproject.toml
        ports:
            - 8000:8000
        restart: always
        depends_on:
            - immo-viz-db
            - immo-monitoring-db
        networks:
            - app-tier

    adminer:
        image: adminer
        restart: always
        ports:
            - 8080:8080
        networks:
            - app-tier

    grafana:
        image: grafana/grafana-enterprise
        container_name: grafana
        restart: unless-stopped
        user: 1000:1000
        environment:
            - GF_SERVER_ROOT_URL=http://grafana.immoviz.com/
            - GF_INSTALL_PLUGINS=grafana-clock-panel
        ports:
            - '3000:3000'
        volumes:
            - .grafana_storage:/var/lib/grafana
        networks:
            - app-tier

    dvf-producer:
        build:
            context: .
            dockerfile: dvf-producer/Dockerfile
        environment:
            KAFKA_HOST:        ${KAFKA_HOST}
            KAFKA_TOPIC_NAME:  ${DVF_KAFKA_TOPIC}
            VIZ_DATABASE_URL:        "postgresql://${IMMO_VIZ_DB_POSTGRES_USER}:${IMMO_VIZ_DB_POSTGRES_PASSWORD}@immo-viz-db:5432/${IMMO_VIZ_DB_POSTGRES_DB}?sslmode=disable"
            MONITORING_DATABASE_URL: "postgresql://${IMMO_MONITORING_DB_POSTGRES_USER}:${IMMO_MONITORING_DB_POSTGRES_PASSWORD}@immo-monitoring-db:5432/${IMMO_MONITORING_DB_POSTGRES_DB}?sslmode=disable"
            DVF_PRODUCER_MAX_WORKERS: ${DVF_PRODUCER_MAX_WORKERS}
        depends_on:
            - kafka
            - immo-viz-db
        restart: "no"
        networks:
            - app-tier

networks:
    app-tier:
        driver: bridge
        name: app-tier

volumes:
    immo-fetch-db:
    immo-viz-db:
    immo-monitoring-db:
    grafana_storage: