services:

    immo-fetch-db:
        image: mongo:5.0.3
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${FETCH_DB_MONGO_USER}
            MONGO_INITDB_ROOT_PASSWORD: ${FETCH_DB_MONGO_PASSWORD}
            MONGO_INITDB_DATABASE: ${FETCH_DB_MONGO_DB}
        volumes:
            - .immo-fetch-db:/data/db
        networks:
            - app-tier

    immo-viz-db:
        image: postgres:16.4
        restart: always
        # set shared memory limit when using docker-compose
        shm_size: 128mb
        # or set shared memory limit when deploy via swarm stack
        #volumes:
        #  - type: tmpfs
        #    target: /dev/shm
        #    tmpfs:
        #      size: 134217728 # 128*2^20 bytes = 128Mb
        environment:
            POSTGRES_USER: ${IMMO_VIZ_DB_POSTGRES_USER}
            POSTGRES_PASSWORD: ${IMMO_VIZ_DB_POSTGRES_PASSWORD}
            POSTGRES_DB: ${IMMO_VIZ_DB_POSTGRES_DB}
        volumes:
            - .immo-viz-db:/var/lib/postgresql/data
        networks:
            - app-tier
    
    immo-monitoring-db:
        image: postgres:16.4
        restart: always
        # set shared memory limit when using docker-compose
        shm_size: 128mb
        # or set shared memory limit when deploy via swarm stack
        #volumes:
        #  - type: tmpfs
        #    target: /dev/shm
        #    tmpfs:
        #      size: 134217728 # 128*2^20 bytes = 128Mb
        environment:
            POSTGRES_USER: ${IMMO_MONITORING_DB_POSTGRES_USER}
            POSTGRES_PASSWORD: ${IMMO_MONITORING_DB_POSTGRES_PASSWORD}
            POSTGRES_DB: ${IMMO_MONITORING_DB_POSTGRES_DB}
        volumes:
            - .immo-monitoring-db:/var/lib/postgresql/data
        networks:
            - app-tier

    immoscraper:
        build:
            context: ./immoscraper
            dockerfile: Dockerfile
        environment:
            FETCH_DB_MONGO_URL: mongodb://${FETCH_DB_MONGO_USER}:${FETCH_DB_MONGO_PASSWORD}@immo-fetch-db:27017/${FETCH_DB_MONGO_DB}
            IMMO_VIZ_API_URL: ${IMMO_VIZ_API_URL}
        depends_on:
            - immo-fetch-db
            - immo-viz-api
        networks:
            - app-tier
    
    analysis-scheduler:
        build:
            context: ./analysis-scheduler
            dockerfile: Dockerfile
        environment:
            FETCH_DB_MONGO_URL: mongodb://${FETCH_DB_MONGO_USER}:${FETCH_DB_MONGO_PASSWORD}@immo-fetch-db:27017/${FETCH_DB_MONGO_DB}
            KAFKA_HOST: ${KAFKA_HOST}
            IMMO_VIZ_API_URL: ${IMMO_VIZ_API_URL}
        depends_on:
            - immo-viz-api
            - immo-monitoring-db
        networks:
            - app-tier

    spark-master:
        image: bitnami/spark:3.5.0
        container_name: spark-master
        restart: always
        ports:
            - 8081:8080
        environment:
            - SPARK_MODE=master
            - SPARK_RPC_AUTHENTICATION_ENABLED=no
            - SPARK_RPC_ENCRYPTION_ENABLED=no
            - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
            - SPARK_SSL_ENABLED=no
            - SPARK_USER=spark
        depends_on:
            - immo-viz-api
        networks:
            - app-tier

    kafka:
        image: 'bitnami/kafka:latest'
        container_name: kafka
        ports:
            - '9092:9092'
        environment:
            - KAFKA_CFG_NODE_ID=0
            - KAFKA_CFG_PROCESS_ROLES=controller,broker
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
        depends_on:
            - immo-viz-api
        networks:
            - app-tier

    spark-worker:
        image: bitnami/spark:3.5.0
        restart: always
        environment:
            - SPARK_MODE=worker
            - SPARK_MASTER_URL=spark://spark-master:7077
            - SPARK_WORKER_MEMORY=1G
            - SPARK_WORKER_CORES=1
            - SPARK_RPC_AUTHENTICATION_ENABLED=no
            - SPARK_RPC_ENCRYPTION_ENABLED=no
            - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
            - SPARK_SSL_ENABLED=no
            - SPARK_USER=spark
        depends_on:
            - kafka
            - spark-master
        networks:
            - app-tier

    spark-submit:
        image: spark-worker-dockerfile
        build:
            context: ./spark/
        command: /opt/bitnami/spark/bin/spark-submit --master spark://spark-master:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.0.1 /opt/bitnami/spark/scripts/consumer.py
        depends_on:
            - kafka
            - spark-master
        volumes:
            - ./spark:/opt/bitnami/spark/scripts
        networks:
            - app-tier
    
    immo-viz-api:
        build:
            context: ./immo-viz-api/
            dockerfile: Dockerfile
        environment:
            VIZ_DATABASE_URL: postgresql://${IMMO_VIZ_DB_POSTGRES_USER}:${IMMO_VIZ_DB_POSTGRES_PASSWORD}@immo-viz-db:5432/${IMMO_VIZ_DB_POSTGRES_DB}
            MONITORING_DATABASE_URL: postgresql://${IMMO_MONITORING_DB_POSTGRES_USER}:${IMMO_MONITORING_DB_POSTGRES_PASSWORD}@immo-monitoring-db:5432/${IMMO_MONITORING_DB_POSTGRES_DB}
        develop:
            watch:
                - action: sync
                  path: ./immo-viz-api/
                  target: /app
                  ignore:
                      - ./immo-viz-api/pyproject.toml
                      - ./immo-viz-api/poetry.lock
                - action: rebuild
                  path: ./immo-viz-api/pyproject.toml
        ports:
            - 8000:8000
        restart: always
        depends_on:
            - immo-viz-db
            - immo-monitoring-db
        networks:
            - app-tier

    adminer:
        image: adminer
        restart: always
        ports:
            - 8080:8080
        networks:
            - app-tier

    grafana:
        image: grafana/grafana-enterprise
        container_name: grafana
        restart: unless-stopped
        environment:
            - GF_SERVER_ROOT_URL=http://grafana.immoviz.com/
            - GF_INSTALL_PLUGINS=grafana-clock-panel
        ports:
            - '3000:3000'
        volumes:
            - .grafana_storage:/var/lib/grafana
        networks:
            - app-tier

networks:
    app-tier:
        driver: bridge
        name: app-tier

volumes:
    immo-fetch-db:
    immo-viz-db:
    immo-monitoring-db:
    grafana_storage:
